// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum Gender {
  male
  female
  lgbt
}

model User {
  id               Int               @id @default(autoincrement())
  username         String            @unique
  email            String            @unique
  password         String
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  role             Role              @default(user)
  isBan            Boolean           @default(false)
  userProfile      UserProfile?
  posts            Post[]
  comments         Comment[]
  appealedPosts    AppealedPost[]
  recommendedPosts RecommendedPost[]

  @@map("users")
}

model UserProfile {
  id           Int       @id @default(autoincrement())
  firstName    String?   @map("first_name")
  lastName     String?   @map("last_name")
  birthDate    DateTime? @map("birth_date") @db.Date
  gender       Gender?
  profileImage String?   @map("profile_image")
  alias        String?
  introduction String?
  userId       Int       @unique @map("user_id")
  user         User      @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model Post {
  id              Int              @id @default(autoincrement())
  title           String
  content         String
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamp(0)
  isDelete        Boolean          @default(false) @map("is_delete")
  canComment      Boolean          @default(true) @map("can_comment")
  userId          Int              @map("user_id")
  user            User             @relation(fields: [userId], references: [id])
  appealedPosts   AppealedPost[]
  comments        Comment[]
  recommendedPost RecommendedPost?
  postImages      postImage[]

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  isDelete  Boolean  @default(false)
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  postId    Int      @map("post_id")
  post      Post     @relation(fields: [postId], references: [id])

  @@map("comments")
}

model AppealedPost {
  id        Int      @id @default(autoincrement())
  postId    Int      @map("post_id")
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  @@map("appealed_posts")
}

model RecommendedPost {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  isDelete  Boolean  @default(false)
  postId    Int      @unique @map("post_id")
  post      Post     @relation(fields: [postId], references: [id])

  @@map("recommended_posts")
}

model postImage {
  id     Int    @id @default(autoincrement())
  image  String
  postId Int    @map("post_id")
  post   Post   @relation(fields: [postId], references: [id])

  @@map("post_images")
}
