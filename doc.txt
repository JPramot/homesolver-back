register
METHOD  POST        /auth/register
REQUEST BODY
{
    username        string      username for show in website
    email           string      email for login
    password        string      password at least 8 character alphabet or number
    confirmPassword string      confirmPassword must match password
}
RESPONSE
201 {
    token: string user token
    user: object user object without password  
    }
400 {
    message: user  error message
    }
500 {
    message: server error message
    }

------------------------------------------------------------------------

login
METHOD  POST        /auth/login
REQUEST BODY
{
    username        string      username for login
    password        string      password for login
}
RESPONSE
200 {
    token: string user token
    user: object user object without password  
    }
400 {
    message: user  error message
    }
500 {
    message: server error message
    }

------------------------------------------------------------------------

get authenticate user 
METHOD get          /auth/me
HEADER AUTHENTICATION   BEARER [JWT]
RESPONSE
200 {
    user: object user object without password  
    }
401 {
    message: user unauthenticate message
    }
500 {
    message: server error message
    }

------------------------------------------------------------------------

User create post 
METHOD POST         /posts
HEADER AUTHENTICATION   BEARER [JWT]
REQUEST BODY
{
    title           string      intro something
    content         string      main
    image           file?       picture for post 
}
RESPONSE
201 {
    post: post object
}
400 {
    message: invalided input
}
401{
    message: user unauthenticate message
}
500{
    message: server error message
}

------------------------------------------------------------------------

get all post 
METHOD GET          /posts
RESPONSE
200 {
    post: post object
}
400 {
    message: post not found
}
500{
    message: server error message
}

------------------------------------------------------------------------

get post with comment
METHOD GET          /posts/:postId/comment
REQUEST params: postId
RESPONSE
200 {
    post: post object with comment
}
400 {
    message: post not found
}
500 {
    message: server error message
}

------------------------------------------------------------------------

User comment on post
METHOD POST         /comments/:postId/
AUTHENTICATION      BEARER [JWT]
REQUEST BODY
{
    content       string      comment something
}
REQUEST params: postId
RESPONSE
201 {
    comment: comment object
}
400 {
    message: user invalid input
}
401 {
    message: unauthenticate message
}
500 {
    message: server error message
}

------------------------------------------------------------------------

User delete post
METHOD DELETE       /posts/:postId
HEADER AUTHENTICATION   BEARER [JWT]
REQUEST params: postId
204 {
    
}
400 {
    message: not found post
}
401{
    message: user unauthenticate message
}
500{
    message: server error message
}

------------------------------------------------------------------------

User appeal post to admin
METHOD POST     /posts/:postId/appeal
HEADER AUTHENTICATION   BEARER [JWT]
REQUEST params: postId
REQUEST BODY
{
    content:    string      why do you appeal this post
}
RESPONSE
200 {
    message: post was appealed to admin
}
400 {
    message: post not found
}
401 {
    message: user unauthenticate message
}
500 {
    message: server error message
}

------------------------------------------------------------------------

Admin get appealed post
METHOD GET          /posts/appealed
HEADER AUTHENTICATION   BEARER [JWT]
RESPONSE
200 {
    appealPost: appealPost object
}
400 {
    message: appealPosts not found
}
401 {
    message: unauthenticate message
}
500 {
    message: server error message
}


------------------------------------------------------------------------

User delete comment (owner post or comment)
METHOD DELETE       /comments/:commentId
HEADER AUTHENTICATION   BEARER [JWT]
REQUEST params: commentId
RESPONSE
204 {

}
400 {
    message: comment not found
}
401 {
    message: user unauthenticate message
}
500 {
    message: server error message
}

------------------------------------------------------------------------

User update profile
METHOD PATCH        /user
HEADER AUTHENTICATION   BEARER [JWT]
RESPONSE
200 {
    profile : profile object
}
400 {
    message: invalided input
}
401{
    message: user unauthenticate message
}
500{
    message: server error message
}










